# sg1 = list(graph = subGraph(t_1.variables, gR), cluster = TRUE)
# sg2 = list(graph = subGraph(t.variables, gR), cluster = TRUE)
# gR = layoutGraph(gR, subGList = list(sg1, sg2),
#                  attrs = list(graph = list(rankdir = "LR")))
# nodeRenderInfo(gR)$fill[t_1.variables] = "tomato"
# nodeRenderInfo(gR)$fill[t.variables] = "gold"
# graph::nodeRenderInfo(gR) <- list(fontsize=40)
# graph::nodeRenderInfo(gR) <- list(vertex.size=150)
# renderGraph(gR)
#package
library(bnlearn)
library(Rgraphviz)
library(dbnR)
library(data.table)
library(igraph)
filepath = "D:\\industrialEngineering\\AdvertisingDataAnalysis\\data\\SortedOut\\Philps_2019 10-12.csv"
df <- read.table(file=filepath,sep = ",", header=TRUE,fileEncoding='utf-8')
df = df[,!(names(df) %in% "date")]
#to numeric
df <- lapply(df, as.numeric)
df <- as.data.frame(df)
#fill mean
for (col in names(df)) {
print(col)
mask <- is.na(df[col])
print(sum(mask))
df[col][,][mask] <-  mean(df[col][,],na.rm=T)
print(sum(is.na(df[col])))
}
#lag = 1-5
originalName = names(df);
for (lag in c(1,2,3,4,5)){
for (col in originalName) {
if(col!="transactions"){
#lag with n=1 and pad with NA (returns vector)
newCol = paste(col," -",lag,sep="")
df[newCol] <- shift(df[col], n=lag, fill=NA, type="lag")
#df[1:lag,newCol] <-  mean(df[newCol][,],na.rm=T)
}
}
}
df = df[complete.cases(df), ]
names(df)
t_1.variables = grep("-1", names(df), value = TRUE)
t_2.variables = grep("-2", names(df), value = TRUE)
t_3.variables = grep("-3", names(df), value = TRUE)
t_4.variables = grep("-4", names(df), value = TRUE)
t_5.variables = grep("-5", names(df), value = TRUE)
t.variables = "transactions"
lags = c("-1","-2","-3","-4","-5")
empty.past =  NULL;
for (i in seq(1, 5)) {
lval = grep(lags[i], names(df), value = TRUE);
for(j in seq(i+1,5)){
if(j>5) break
rval = grep(lags[j], names(df), value = TRUE);
empty = expand.grid(from=lval,to=rval,stringsAsFactors = FALSE)
if(is.null(empty.past)){
empty.past = empty;
}
else{
empty.past = rbind(empty.past,empty,value = TRUE)
}
}
}
#remove unwanted row
for (i in seq(1,length(empty.past[,1]))) {
if(!empty.past[i,1] %in% names(df)){
empty.past = empty.past[-i,]
}
}
#remove index at t
indexAtTimet =  setdiff(names(df),c(t_1.variables,
t_2.variables,
t_3.variables,
t_4.variables,
t_5.variables,
t.variables))
for (col in indexAtTimet) {
df = df[,!(names(df) %in% col)]
}
#bl
roots = expand.grid(from=c("transactions"),to=setdiff(names(df),c("transactions")),stringsAsFactors = FALSE)
empty.7 = expand.grid(from=c("GDN.IMP -1","GDN.Clicks -1"),to=c("GDN.Spending -1"),stringsAsFactors = FALSE)
empty.8 = expand.grid(from=c("GDN.IMP -2","GDN.Clicks -2"),to=c("GDN.Spending -2"),stringsAsFactors = FALSE)
empty.9 = expand.grid(from=c("GDN.IMP -3","GDN.Clicks -3"),to=c("GDN.Spending -3"),stringsAsFactors = FALSE)
empty.10 = expand.grid(from=c("GDN.IMP -4","GDN.Clicks -4"),to=c("GDN.Spending -4"),stringsAsFactors = FALSE)
empty.11 = expand.grid(from=c("GDN.IMP -5","GDN.Clicks -5"),to=c("GDN.Spending -5"),stringsAsFactors = FALSE)
empty.13 = expand.grid(from=c("FB.IMP -1","FB.Clicks -1"),to=c("FB.Spending -1"),stringsAsFactors = FALSE)
empty.14 = expand.grid(from=c("FB.IMP -2","FB.Clicks -2"),to=c("FB.Spending -2"),stringsAsFactors = FALSE)
empty.15 = expand.grid(from=c("FB.IMP -3","FB.Clicks -3"),to=c("FB.Spending -3"),stringsAsFactors = FALSE)
empty.16 = expand.grid(from=c("FB.IMP -4","FB.Clicks -4"),to=c("FB.Spending -4"),stringsAsFactors = FALSE)
empty.17 = expand.grid(from=c("FB.IMP -5","FB.Clicks -5"),to=c("FB.Spending -5"),stringsAsFactors = FALSE)
empty.19 = expand.grid(from=c("GSM.IMP -1","GSM.Clicks -1"),to=c("GSM.Spending -1"),stringsAsFactors = FALSE)
empty.20 = expand.grid(from=c("GSM.IMP -2","GSM.Clicks -2"),to=c("GSM.Spending -2"),stringsAsFactors = FALSE)
empty.21 = expand.grid(from=c("GSM.IMP -3","GSM.Clicks -3"),to=c("GSM.Spending -3"),stringsAsFactors = FALSE)
empty.22 = expand.grid(from=c("GSM.IMP -4","GSM.Clicks -4"),to=c("GSM.Spending -4"),stringsAsFactors = FALSE)
empty.23 = expand.grid(from=c("GSM.IMP -5","GSM.Clicks -5"),to=c("GSM.Spending -5"),stringsAsFactors = FALSE)
bl = rbind(roots, empty.past,
empty.7,empty.8,empty.9,empty.10,empty.11,
empty.13,empty.14,empty.15,empty.16,empty.17,
empty.19,empty.20,empty.21,empty.22,empty.23)
dyn.dag = tabu(df, blacklist = bl)
dyn.dag$nodes
#export nodes
nodes = c()
parents = c()
for (i in seq(1,length(dyn.dag$nodes))) {
node = names(dyn.dag$nodes[i])
parent = dyn.dag$nodes[i][[node]][["parents"]]
nodes = append(nodes,node)
parents = append(parents,paste(parent,collapse="|"))
}
d = data.frame(nodes,parents)
write.csv(d,"bayesian network node3.csv")
write.csv(names(df),"bayesian network names3.csv")
write.csv(bl,"bayesian network blacklist3.csv")
#plot
# gR = graphviz.plot(dyn.dag, shape = "rectangle",render=FALSE)
# sg1 = list(graph = subGraph(t_1.variables, gR), cluster = TRUE)
# sg2 = list(graph = subGraph(t.variables, gR), cluster = TRUE)
# gR = layoutGraph(gR, subGList = list(sg1, sg2),
#                  attrs = list(graph = list(rankdir = "LR")))
# nodeRenderInfo(gR)$fill[t_1.variables] = "tomato"
# nodeRenderInfo(gR)$fill[t.variables] = "gold"
# graph::nodeRenderInfo(gR) <- list(fontsize=40)
# graph::nodeRenderInfo(gR) <- list(vertex.size=150)
# renderGraph(gR)
#package
library(bnlearn)
library(Rgraphviz)
library(dbnR)
library(data.table)
library(igraph)
filepath = "D:\\industrialEngineering\\AdvertisingDataAnalysis\\data\\SortedOut\\Philps_2019 10-12.csv"
df <- read.table(file=filepath,sep = ",", header=TRUE,fileEncoding='utf-8')
df = df[,!(names(df) %in% "date")]
#to numeric
df <- lapply(df, as.numeric)
df <- as.data.frame(df)
#fill mean
for (col in names(df)) {
print(col)
mask <- is.na(df[col])
print(sum(mask))
df[col][,][mask] <-  mean(df[col][,],na.rm=T)
print(sum(is.na(df[col])))
}
#lag = 1-5
originalName = names(df);
for (lag in c(1,2,3,4,5)){
for (col in originalName) {
if(col!="transactions"){
#lag with n=1 and pad with NA (returns vector)
newCol = paste(col," -",lag,sep="")
df[newCol] <- shift(df[col], n=lag, fill=NA, type="lag")
#df[1:lag,newCol] <-  mean(df[newCol][,],na.rm=T)
}
}
}
df = df[complete.cases(df), ]
names(df)
t_1.variables = grep("-1", names(df), value = TRUE)
t_2.variables = grep("-2", names(df), value = TRUE)
t_3.variables = grep("-3", names(df), value = TRUE)
t_4.variables = grep("-4", names(df), value = TRUE)
t_5.variables = grep("-5", names(df), value = TRUE)
t.variables = "transactions"
lags = c("-1","-2","-3","-4","-5")
empty.past =  NULL;
for (i in seq(1, 5)) {
lval = grep(lags[i], names(df), value = TRUE);
for(j in seq(i+1,5)){
if(j>5) break
rval = grep(lags[j], names(df), value = TRUE);
empty = expand.grid(from=lval,to=rval,stringsAsFactors = FALSE)
if(is.null(empty.past)){
empty.past = empty;
}
else{
empty.past = rbind(empty.past,empty,value = TRUE)
}
}
}
#remove unwanted row
for (i in seq(1,length(empty.past[,1]))) {
if(!empty.past[i,1] %in% names(df)){
empty.past = empty.past[-i,]
}
}
#remove index at t
indexAtTimet =  setdiff(names(df),c(t_1.variables,
t_2.variables,
t_3.variables,
t_4.variables,
t_5.variables,
t.variables))
for (col in indexAtTimet) {
df = df[,!(names(df) %in% col)]
}
#bl
roots = expand.grid(from=c("transactions"),to=setdiff(names(df),c("transactions")),stringsAsFactors = FALSE)
empty.7 = expand.grid(from=c("GDN.IMP -1","GDN.Clicks -1"),to=c("GDN.Spending -1"),stringsAsFactors = FALSE)
empty.8 = expand.grid(from=c("GDN.IMP -2","GDN.Clicks -2"),to=c("GDN.Spending -2"),stringsAsFactors = FALSE)
empty.9 = expand.grid(from=c("GDN.IMP -3","GDN.Clicks -3"),to=c("GDN.Spending -3"),stringsAsFactors = FALSE)
empty.10 = expand.grid(from=c("GDN.IMP -4","GDN.Clicks -4"),to=c("GDN.Spending -4"),stringsAsFactors = FALSE)
empty.11 = expand.grid(from=c("GDN.IMP -5","GDN.Clicks -5"),to=c("GDN.Spending -5"),stringsAsFactors = FALSE)
empty.13 = expand.grid(from=c("FB.IMP -1","FB.Clicks -1"),to=c("FB.Spending -1"),stringsAsFactors = FALSE)
empty.14 = expand.grid(from=c("FB.IMP -2","FB.Clicks -2"),to=c("FB.Spending -2"),stringsAsFactors = FALSE)
empty.15 = expand.grid(from=c("FB.IMP -3","FB.Clicks -3"),to=c("FB.Spending -3"),stringsAsFactors = FALSE)
empty.16 = expand.grid(from=c("FB.IMP -4","FB.Clicks -4"),to=c("FB.Spending -4"),stringsAsFactors = FALSE)
empty.17 = expand.grid(from=c("FB.IMP -5","FB.Clicks -5"),to=c("FB.Spending -5"),stringsAsFactors = FALSE)
empty.19 = expand.grid(from=c("GSM.IMP -1","GSM.Clicks -1"),to=c("GSM.Spending -1"),stringsAsFactors = FALSE)
empty.20 = expand.grid(from=c("GSM.IMP -2","GSM.Clicks -2"),to=c("GSM.Spending -2"),stringsAsFactors = FALSE)
empty.21 = expand.grid(from=c("GSM.IMP -3","GSM.Clicks -3"),to=c("GSM.Spending -3"),stringsAsFactors = FALSE)
empty.22 = expand.grid(from=c("GSM.IMP -4","GSM.Clicks -4"),to=c("GSM.Spending -4"),stringsAsFactors = FALSE)
empty.23 = expand.grid(from=c("GSM.IMP -5","GSM.Clicks -5"),to=c("GSM.Spending -5"),stringsAsFactors = FALSE)
bl = rbind(roots, empty.past,
empty.7,empty.8,empty.9,empty.10,empty.11,
empty.13,empty.14,empty.15,empty.16,empty.17,
empty.19,empty.20,empty.21,empty.22,empty.23)
dyn.dag = tabu(df, blacklist = bl)
dyn.dag$nodes
#export nodes
nodes = c()
parents = c()
for (i in seq(1,length(dyn.dag$nodes))) {
node = names(dyn.dag$nodes[i])
parent = dyn.dag$nodes[i][[node]][["parents"]]
nodes = append(nodes,node)
parents = append(parents,paste(parent,collapse="|"))
}
d = data.frame(nodes,parents)
write.csv(d,"bayesian network node3.csv")
write.csv(names(df),"bayesian network names3.csv")
write.csv(bl,"bayesian network blacklist3.csv")
#plot
# gR = graphviz.plot(dyn.dag, shape = "rectangle",render=FALSE)
# sg1 = list(graph = subGraph(t_1.variables, gR), cluster = TRUE)
# sg2 = list(graph = subGraph(t.variables, gR), cluster = TRUE)
# gR = layoutGraph(gR, subGList = list(sg1, sg2),
#                  attrs = list(graph = list(rankdir = "LR")))
# nodeRenderInfo(gR)$fill[t_1.variables] = "tomato"
# nodeRenderInfo(gR)$fill[t.variables] = "gold"
# graph::nodeRenderInfo(gR) <- list(fontsize=40)
# graph::nodeRenderInfo(gR) <- list(vertex.size=150)
# renderGraph(gR)
#package
library(bnlearn)
library(Rgraphviz)
library(dbnR)
library(data.table)
library(igraph)
filepath = "D:\\industrialEngineering\\AdvertisingDataAnalysis\\data\\SortedOut\\Philps_2019 10-12.csv"
df <- read.table(file=filepath,sep = ",", header=TRUE,fileEncoding='utf-8')
df = df[,!(names(df) %in% "date")]
#to numeric
df <- lapply(df, as.numeric)
df <- as.data.frame(df)
#fill mean
for (col in names(df)) {
print(col)
mask <- is.na(df[col])
print(sum(mask))
df[col][,][mask] <-  mean(df[col][,],na.rm=T)
print(sum(is.na(df[col])))
}
#lag = 1-5
originalName = names(df);
for (lag in c(1,2,3,4,5)){
for (col in originalName) {
if(col!="transactions"){
#lag with n=1 and pad with NA (returns vector)
newCol = paste(col," -",lag,sep="")
df[newCol] <- shift(df[col], n=lag, fill=NA, type="lag")
#df[1:lag,newCol] <-  mean(df[newCol][,],na.rm=T)
}
}
}
df = df[complete.cases(df), ]
names(df)
t_1.variables = grep("-1", names(df), value = TRUE)
t_2.variables = grep("-2", names(df), value = TRUE)
t_3.variables = grep("-3", names(df), value = TRUE)
t_4.variables = grep("-4", names(df), value = TRUE)
t_5.variables = grep("-5", names(df), value = TRUE)
t.variables = "transactions"
lags = c("-1","-2","-3","-4","-5")
empty.past =  NULL;
for (i in seq(1, 5)) {
lval = grep(lags[i], names(df), value = TRUE);
for(j in seq(i+1,5)){
if(j>5) break
rval = grep(lags[j], names(df), value = TRUE);
empty = expand.grid(from=lval,to=rval,stringsAsFactors = FALSE)
if(is.null(empty.past)){
empty.past = empty;
}
else{
empty.past = rbind(empty.past,empty,value = TRUE)
}
}
}
#remove unwanted row
for (i in seq(1,length(empty.past[,1]))) {
if(!empty.past[i,1] %in% names(df)){
empty.past = empty.past[-i,]
}
}
#remove index at t
indexAtTimet =  setdiff(names(df),c(t_1.variables,
t_2.variables,
t_3.variables,
t_4.variables,
t_5.variables,
t.variables))
for (col in indexAtTimet) {
df = df[,!(names(df) %in% col)]
}
#bl
roots = expand.grid(from=c("transactions"),to=setdiff(names(df),c("transactions")),stringsAsFactors = FALSE)
empty.7 = expand.grid(from=c("GDN.IMP -1","GDN.Clicks -1"),to=c("GDN.Spending -1"),stringsAsFactors = FALSE)
empty.8 = expand.grid(from=c("GDN.IMP -2","GDN.Clicks -2"),to=c("GDN.Spending -2"),stringsAsFactors = FALSE)
empty.9 = expand.grid(from=c("GDN.IMP -3","GDN.Clicks -3"),to=c("GDN.Spending -3"),stringsAsFactors = FALSE)
empty.10 = expand.grid(from=c("GDN.IMP -4","GDN.Clicks -4"),to=c("GDN.Spending -4"),stringsAsFactors = FALSE)
empty.11 = expand.grid(from=c("GDN.IMP -5","GDN.Clicks -5"),to=c("GDN.Spending -5"),stringsAsFactors = FALSE)
empty.13 = expand.grid(from=c("FB.IMP -1","FB.Clicks -1"),to=c("FB.Spending -1"),stringsAsFactors = FALSE)
empty.14 = expand.grid(from=c("FB.IMP -2","FB.Clicks -2"),to=c("FB.Spending -2"),stringsAsFactors = FALSE)
empty.15 = expand.grid(from=c("FB.IMP -3","FB.Clicks -3"),to=c("FB.Spending -3"),stringsAsFactors = FALSE)
empty.16 = expand.grid(from=c("FB.IMP -4","FB.Clicks -4"),to=c("FB.Spending -4"),stringsAsFactors = FALSE)
empty.17 = expand.grid(from=c("FB.IMP -5","FB.Clicks -5"),to=c("FB.Spending -5"),stringsAsFactors = FALSE)
empty.19 = expand.grid(from=c("GSM.IMP -1","GSM.Clicks -1"),to=c("GSM.Spending -1"),stringsAsFactors = FALSE)
empty.20 = expand.grid(from=c("GSM.IMP -2","GSM.Clicks -2"),to=c("GSM.Spending -2"),stringsAsFactors = FALSE)
empty.21 = expand.grid(from=c("GSM.IMP -3","GSM.Clicks -3"),to=c("GSM.Spending -3"),stringsAsFactors = FALSE)
empty.22 = expand.grid(from=c("GSM.IMP -4","GSM.Clicks -4"),to=c("GSM.Spending -4"),stringsAsFactors = FALSE)
empty.23 = expand.grid(from=c("GSM.IMP -5","GSM.Clicks -5"),to=c("GSM.Spending -5"),stringsAsFactors = FALSE)
bl = rbind(roots, empty.past,
empty.7,empty.8,empty.9,empty.10,empty.11,
empty.13,empty.14,empty.15,empty.16,empty.17,
empty.19,empty.20,empty.21,empty.22,empty.23)
dyn.dag = tabu(df, blacklist = bl)
dyn.dag$nodes
#export nodes
nodes = c()
parents = c()
for (i in seq(1,length(dyn.dag$nodes))) {
node = names(dyn.dag$nodes[i])
parent = dyn.dag$nodes[i][[node]][["parents"]]
nodes = append(nodes,node)
parents = append(parents,paste(parent,collapse="|"))
}
d = data.frame(nodes,parents)
write.csv(d,"bayesian network node3.csv")
write.csv(names(df),"bayesian network names3.csv")
write.csv(bl,"bayesian network blacklist3.csv")
#plot
# gR = graphviz.plot(dyn.dag, shape = "rectangle",render=FALSE)
# sg1 = list(graph = subGraph(t_1.variables, gR), cluster = TRUE)
# sg2 = list(graph = subGraph(t.variables, gR), cluster = TRUE)
# gR = layoutGraph(gR, subGList = list(sg1, sg2),
#                  attrs = list(graph = list(rankdir = "LR")))
# nodeRenderInfo(gR)$fill[t_1.variables] = "tomato"
# nodeRenderInfo(gR)$fill[t.variables] = "gold"
# graph::nodeRenderInfo(gR) <- list(fontsize=40)
# graph::nodeRenderInfo(gR) <- list(vertex.size=150)
# renderGraph(gR)
s <- 0
start = Sys.time()
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
# 迴圈內重複進行的動作
s <- s + i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
# 迴圈內重複進行的動作
s <- s + i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
# 迴圈內重複進行的動作
s <- s + i
}
print(s)
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:100000)
for(i in c(1:100000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:100000)
for(i in c(1:100000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
update.packages("Rcpp")
update.packages("Rcpp")
install.packages("graph")
update.packages("Rcpp")
document()
library("devtools")
library("roxygen2")
R --version
verson
version
install.packages("installr")
library(installr)
updateR()
install.packages("graph")
document()
packageVersion("Rcpp")
install.packages("graph")
library("devtools")
library("roxygen2")
install.packages("devtools")
library("devtools")
library("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
library("devtools")
library("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("E:\Download\stringi_1.6.2.zip", repos = NULL, type = "source")
install.packages("E:/Download/stringi_1.6.2.zip", repos = NULL, type = "source")
library("roxygen2")
("devtools")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
library("devtools")
library("roxygen2")
update.packages("Rcpp")
packageVersion("Rcpp")
setwd("C:/Users/Jerry/Documents/GitHub/bnTool")
setwd("bnTool")
document()
setwd("..")
install("bnTool")
library(bnTool)
# set path
setwd("C:/Users/Jerry/Documents/GitHub/bnTool")
# generate package
setwd("bnTool")
document()
document()
document()
document()
