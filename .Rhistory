}
print(s)
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:100000)
for(i in c(1:100000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:100000)
for(i in c(1:100000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
s <- 0
start = Sys.time()
c = c(1:1000000)
for(i in c(1:1000000)){ # for-loop裡，i會依序帶入1~135的值，重複進行括號內的程式碼
c[i] = i
}
print(Sys.time()-start)
update.packages("Rcpp")
update.packages("Rcpp")
install.packages("graph")
update.packages("Rcpp")
document()
library("devtools")
library("roxygen2")
R --version
verson
version
install.packages("installr")
library(installr)
updateR()
install.packages("graph")
document()
packageVersion("Rcpp")
install.packages("graph")
library("devtools")
library("roxygen2")
install.packages("devtools")
library("devtools")
library("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
library("devtools")
library("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages("roxygen2")
## Load package
library(bnlearn)
library(data.table)
## Set and Read File
#file path and read file
setwd("D:/industrialEngineering/AdvertisingDataAnalysis")
filePath = "test_data.csv"
nodePath1 = "network_node_ver1.csv"
nodePath2 = "network_node_ver2.csv"
blackListPath = "blacklist.txt"
training_data <- read.table(file=filePath,sep = ",", header=TRUE, fileEncoding='utf-8')
head(training_data)
## Preprocessing
# drop unwanted columns
unwanted_columns = c("date")
training_data = training_data[,!(names(training_data) %in% unwanted_columns)]
#fill 0
for (col in names(training_data)) {
mask <- is.na(training_data[col])
training_data[[col]][mask] = 0
msg = sprintf("[%s] MissingCount=%d, MissingRatio=%.2f%%",col,sum(mask),sum(mask)/length(training_data[[col]])*100)
print(msg, quote = FALSE)
}
#standardize
training_data = scale(training_data, center = TRUE, scale = TRUE)
training_data <- as.data.frame(training_data)
## feature engineering
### Generate variable lag
#generate variable lag  (date(t)=> date(t-1))
originalName = names(training_data);
lag = 1
for (col in originalName) {
newCol = paste(col," -",lag,sep="")
training_data[newCol] <- shift(training_data[col], n=lag, fill=NA, type="lag")
msg = sprintf("[%s] is Added.",newCol)
print(msg,quote=FALSE)
}
training_data = training_data[complete.cases(training_data), ]
### Construct blacklist
# construct black list function
add_blacklist <- function(from,to,blackList) {
bl = expand.grid(from=from,to=to,stringsAsFactors = FALSE)
blackList = rbind(blackList,bl)
return (blackList)
}
blackList = data.frame(from = character(),to=character())
#[blacklist] not from t to t-1
t_1.variables = grep("-1", names(training_data), value = TRUE)
t.variables = setdiff(names(training_data),t_1.variables)
blackList = add_blacklist(t.variables,t_1.variables,blackList)
#[blacklist] not from transaction to other
target.variable = "transaction"
other.variables = names(training_data)[!(names(training_data) %in% target.variable)]
blackList = add_blacklist(target.variable,c(other.variables),blackList)
#[blacklist] not from transaction-1 to other-1
target.variable = "transaction -1"
black.causality_1_1 = expand.grid(from=target.variable,to=c(t_1.variables))
blackList = add_blacklist(target.variable,c(t_1.variables),blackList)
#[blacklist] not from clicks/IMP to spending
blackList = add_blacklist(c("GDN.IMP","GDN.Clicks"),c("GDN.Spending"),blackList)
blackList = add_blacklist(c("GDN.IMP -1","GDN.Clicks -1"),c("GDN.Spending -1"),blackList)
blackList = add_blacklist(c("FB.IMP","FB.Clicks"),c("FB.Spending"),blackList)
blackList = add_blacklist(c("FB.IMP -1","FB.Clicks -1"),c("FB.Spending -1"),blackList)
blackList = add_blacklist(c("GSM.IMP","GSM.Clicks"),c("GSM.Spending"),blackList)
blackList = add_blacklist(c("GSM.IMP -1","GSM.Clicks -1"),c("GSM.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP -1","Shopping.AD.Clicks -1"),c("Shopping.AD.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
head(blackList)
network = tabu(training_data, blacklist = blackList)
install.packages("bnlearn")
## Load package
library(bnlearn)
network = tabu(training_data, blacklist = blackList)
# construct black list function
add_blacklist <- function(from,to,blackList) {
bl = expand.grid(from=from,to=to,stringsAsFactors = FALSE)
blackList = rbind(blackList,bl)
return (blackList)
}
blackList = data.frame(from = character(),to=character())
#[blacklist] not from t to t-1
t_1.variables = grep("-1", names(training_data), value = TRUE)
t.variables = setdiff(names(training_data),t_1.variables)
blackList = add_blacklist(t.variables,t_1.variables,blackList)
#[blacklist] not from transaction to other
target.variable = "transaction"
other.variables = names(training_data)[!(names(training_data) %in% target.variable)]
blackList = add_blacklist(target.variable,c(other.variables),blackList)
#[blacklist] not from transaction-1 to other-1
target.variable = "transaction -1"
black.causality_1_1 = expand.grid(from=target.variable,to=c(t_1.variables))
blackList = add_blacklist(target.variable,c(t_1.variables),blackList)
#[blacklist] not from clicks/IMP to spending
blackList = add_blacklist(c("GDN.IMP","GDN.Clicks"),c("GDN.Spending"),blackList)
blackList = add_blacklist(c("GDN.IMP -1","GDN.Clicks -1"),c("GDN.Spending -1"),blackList)
blackList = add_blacklist(c("FB.IMP","FB.Clicks"),c("FB.Spending"),blackList)
blackList = add_blacklist(c("FB.IMP -1","FB.Clicks -1"),c("FB.Spending -1"),blackList)
blackList = add_blacklist(c("GSM.IMP","GSM.Clicks"),c("GSM.Spending"),blackList)
blackList = add_blacklist(c("GSM.IMP -1","GSM.Clicks -1"),c("GSM.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP -1","Shopping.AD.Clicks -1"),c("Shopping.AD.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
head(blackList)
## Construct bayesian network
network = tabu(training_data, blacklist = blackList)
#file path and read file
setwd("D:/industrialEngineering/AdvertisingDataAnalysis")
filePath = "test_data.csv"
nodePath1 = "network_node_ver1.csv"
nodePath2 = "network_node_ver2.csv"
blackListPath = "blacklist.txt"
training_data <- read.table(file=filePath,sep = ",", header=TRUE, fileEncoding='utf-8')
head(training_data)
## Preprocessing
# drop unwanted columns
unwanted_columns = c("date")
training_data = training_data[,!(names(training_data) %in% unwanted_columns)]
#fill 0
for (col in names(training_data)) {
mask <- is.na(training_data[col])
training_data[[col]][mask] = 0
msg = sprintf("[%s] MissingCount=%d, MissingRatio=%.2f%%",col,sum(mask),sum(mask)/length(training_data[[col]])*100)
print(msg, quote = FALSE)
}
#standardize
training_data = scale(training_data, center = TRUE, scale = TRUE)
training_data <- as.data.frame(training_data)
## feature engineering
### Generate variable lag
#generate variable lag  (date(t)=> date(t-1))
originalName = names(training_data);
lag = 1
for (col in originalName) {
newCol = paste(col," -",lag,sep="")
training_data[newCol] <- shift(training_data[col], n=lag, fill=NA, type="lag")
msg = sprintf("[%s] is Added.",newCol)
print(msg,quote=FALSE)
}
training_data = training_data[complete.cases(training_data), ]
### Construct blacklist
# construct black list function
add_blacklist <- function(from,to,blackList) {
bl = expand.grid(from=from,to=to,stringsAsFactors = FALSE)
blackList = rbind(blackList,bl)
return (blackList)
}
blackList = data.frame(from = character(),to=character())
#[blacklist] not from t to t-1
t_1.variables = grep("-1", names(training_data), value = TRUE)
t.variables = setdiff(names(training_data),t_1.variables)
blackList = add_blacklist(t.variables,t_1.variables,blackList)
#[blacklist] not from transaction to other
target.variable = "transaction"
other.variables = names(training_data)[!(names(training_data) %in% target.variable)]
blackList = add_blacklist(target.variable,c(other.variables),blackList)
#[blacklist] not from transaction-1 to other-1
target.variable = "transaction -1"
black.causality_1_1 = expand.grid(from=target.variable,to=c(t_1.variables))
blackList = add_blacklist(target.variable,c(t_1.variables),blackList)
#[blacklist] not from clicks/IMP to spending
blackList = add_blacklist(c("GDN.IMP","GDN.Clicks"),c("GDN.Spending"),blackList)
blackList = add_blacklist(c("GDN.IMP -1","GDN.Clicks -1"),c("GDN.Spending -1"),blackList)
blackList = add_blacklist(c("FB.IMP","FB.Clicks"),c("FB.Spending"),blackList)
blackList = add_blacklist(c("FB.IMP -1","FB.Clicks -1"),c("FB.Spending -1"),blackList)
blackList = add_blacklist(c("GSM.IMP","GSM.Clicks"),c("GSM.Spending"),blackList)
blackList = add_blacklist(c("GSM.IMP -1","GSM.Clicks -1"),c("GSM.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP -1","Shopping.AD.Clicks -1"),c("Shopping.AD.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
head(blackList)
## Construct bayesian network
network = tabu(training_data, blacklist = blackList)
shift
library(data.table)
install.packages("data.table")
library(data.table)
#file path and read file
setwd("D:/industrialEngineering/AdvertisingDataAnalysis")
filePath = "test_data.csv"
nodePath1 = "network_node_ver1.csv"
nodePath2 = "network_node_ver2.csv"
blackListPath = "blacklist.txt"
training_data <- read.table(file=filePath,sep = ",", header=TRUE, fileEncoding='utf-8')
head(training_data)
## Preprocessing
# drop unwanted columns
unwanted_columns = c("date")
training_data = training_data[,!(names(training_data) %in% unwanted_columns)]
#fill 0
for (col in names(training_data)) {
mask <- is.na(training_data[col])
training_data[[col]][mask] = 0
msg = sprintf("[%s] MissingCount=%d, MissingRatio=%.2f%%",col,sum(mask),sum(mask)/length(training_data[[col]])*100)
print(msg, quote = FALSE)
}
#standardize
training_data = scale(training_data, center = TRUE, scale = TRUE)
training_data <- as.data.frame(training_data)
## feature engineering
### Generate variable lag
#generate variable lag  (date(t)=> date(t-1))
originalName = names(training_data);
lag = 1
for (col in originalName) {
newCol = paste(col," -",lag,sep="")
training_data[newCol] <- shift(training_data[col], n=lag, fill=NA, type="lag")
msg = sprintf("[%s] is Added.",newCol)
print(msg,quote=FALSE)
}
training_data = training_data[complete.cases(training_data), ]
### Construct blacklist
# construct black list function
add_blacklist <- function(from,to,blackList) {
bl = expand.grid(from=from,to=to,stringsAsFactors = FALSE)
blackList = rbind(blackList,bl)
return (blackList)
}
blackList = data.frame(from = character(),to=character())
#[blacklist] not from t to t-1
t_1.variables = grep("-1", names(training_data), value = TRUE)
t.variables = setdiff(names(training_data),t_1.variables)
blackList = add_blacklist(t.variables,t_1.variables,blackList)
#[blacklist] not from transaction to other
target.variable = "transaction"
other.variables = names(training_data)[!(names(training_data) %in% target.variable)]
blackList = add_blacklist(target.variable,c(other.variables),blackList)
#[blacklist] not from transaction-1 to other-1
target.variable = "transaction -1"
black.causality_1_1 = expand.grid(from=target.variable,to=c(t_1.variables))
blackList = add_blacklist(target.variable,c(t_1.variables),blackList)
#[blacklist] not from clicks/IMP to spending
blackList = add_blacklist(c("GDN.IMP","GDN.Clicks"),c("GDN.Spending"),blackList)
blackList = add_blacklist(c("GDN.IMP -1","GDN.Clicks -1"),c("GDN.Spending -1"),blackList)
blackList = add_blacklist(c("FB.IMP","FB.Clicks"),c("FB.Spending"),blackList)
blackList = add_blacklist(c("FB.IMP -1","FB.Clicks -1"),c("FB.Spending -1"),blackList)
blackList = add_blacklist(c("GSM.IMP","GSM.Clicks"),c("GSM.Spending"),blackList)
blackList = add_blacklist(c("GSM.IMP -1","GSM.Clicks -1"),c("GSM.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP -1","Shopping.AD.Clicks -1"),c("Shopping.AD.Spending -1"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
blackList = add_blacklist(c("Shopping.AD.IMP","Shopping.AD.Clicks"),c("Shopping.AD.Spending"),blackList)
head(blackList)
data = data(coronary)
bn_model = tabu(training_data, blacklist = blackList)
View(bn_model)
library(bnTool)
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
library(bnTool)
view1 = create_from_to_dataframe()
update.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
update.packages("vbjc5275/bnTool")
library(bnTool)
remove.packages("bnTool", lib="~/R/win-library/4.1")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
library(bnTool)
install.packages("vbjc5275/bnTool")
install_github('bnTool','vbjc5275')
install_github('bnTool','vbjc5275')
library(devtools)
install_github('bnTool','vbjc5275')
install_github('bnTool','vbjc5275')
update.packages("vbjc5275/bnTool")
install_github('bnTool','vbjc5275')
install_github('vbjc5275/bnTool')
library(bnlearn)
library(bnTool)
data = data(coronary)
bn_model = tabu(training_data, blacklist = blackList)
bn_model = tabu(data)
data
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewr(bn_model)
view = create_from_to_viewer(bn_model)
view = create_from_to_viewer(bn_model)
library(bnTool)
install.packages("vbjc5275/bnTool")
install.packages("vbjc5275/bnTool")
library(devtools)
install_github('vbjc5275/bnTool')
library(bnTool)
view = create_from_to_viewer(bn_model)
# set path
setwd("C:/Users/Jerry/Documents/GitHub/bnTool")
document()
library("devtools")
library("roxygen2")
document()
view = create_from_to_viewer(bn_model)
library(devtools)
install_github('vbjc5275/bnTool')
library(devtools)
install_github('vbjc5275/bnTool')
library(bnlearn)
library(bnTool)
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
library(bnTool)
detach("package:bnTool", unload = TRUE)
remove.packages("bnTool", lib="~/R/win-library/4.1")
install_github('vbjc5275/bnTool')
library(bnTool)
view = create_from_to_viewer(bn_model)
create_from_to_viewer
library(devtools)
install_github('vbjc5275/bnTool')
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
# set path
setwd("C:/Users/Jerry/Documents/GitHub/bnTool")
document()
library(devtools)
install_github('vbjc5275/bnTool')
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
create_from_to_viewer
## Load package
library(bnlearn)
create_from_to_viewer
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
# set path
setwd("C:/Users/Jerry/Documents/GitHub/bnTool")
document()
library("devtools")
library("roxygen2")
document()
library(devtools)
install_github('vbjc5275/bnTool')
## Load package
library(bnlearn)
library(bnTool)
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
library(devtools)
install_github('vbjc5275/bnTool')
library(devtools)
install_github('vbjc5275/bnTool')
library(bnlearn)
library(bnTool)
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
library(devtools)
install_github('vbjc5275/bnTool')
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
## Load package
library(bnlearn)
library(bnTool)
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
view
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
prit(view)
data(coronary)
bn_model = tabu(coronary)
view = create_from_to_viewer(bn_model)
print(view)
data(coronary)
bn_model = tabu(coronary)
create_from_to_viewer(bn_model)
create_child_parent_viewer(bn_model)
data.frame(nodes,parents,colsnames)
data.frame(nodes,parents,colsnames=c("node","parent"))
data.frame(c(1),c(2),colsnames=c("node","parent"))
data.frame(c(1),c(2),colnames=c("node","parent"))
data.frame(c(1),c(2),col.names=c("node","parent"))
data.frame(c(1),c(2))
a = data.frame(c(1),c(2))
a.names = c("2","3")
a
a.names = c("2","3")
a
a.col.names = c("2","3")
a
colnames(a) = c("a","b")
a
library(devtools)
install_github('vbjc5275/bnTool')
library(devtools)
install_github('vbjc5275/bnTool')
